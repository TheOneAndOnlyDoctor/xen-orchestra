#!/usr/bin/env node

const defer = require('golike-defer').default
const { execFile } = require('child_process')
const { fromCallback } = require('promise-toolbox')

const { readFile, run, writeFile } = require('./utils')

const git = args => fromCallback(cb => execFile('git', args, cb))

const gitDiff = (what, args = []) =>
  git(
    [
      'diff-' + what,
      '--diff-filter=AM',
      '--ignore-submodules',
      '--name-only',
    ].concat(args)
  ).then(stdout => stdout.split('\n').filter(_ => _ !== ''))
const gitDiffFiles = (files = []) => gitDiff('files', files)
const gitDiffIndex = () => gitDiff('index', ['--cached', 'HEAD'])

const formatFiles = files =>
  run('./node_modules/.bin/prettier', ['--write'].concat(files)).then(() =>
    run(
      './node_modules/.bin/eslint',
      ['--ignore-pattern', '!*', '--fix'].concat(files)
    )
  )
const testFiles = files =>
  run(
    './node_modules/.bin/jest',
    ['--findRelatedTests', '--passWithNoTests'].concat(files)
  )

require('exec-promise')(
  defer(async $defer => {
    let files = await gitDiffIndex()
    files = files.filter(_ => _.endsWith('.js'))
    if (files.length === 0) {
      return
    }

    // save the list of files with unstaged changes
    let unstaged = await gitDiffFiles(files)

    // format all files
    await formatFiles(files)

    if (unstaged.length !== 0) {
      // refresh the list of files with unstaged changes, maybe the
      // changes have been reverted by the formatting
      unstaged = await gitDiffFiles(unstaged)

      if (unstaged.length !== 0) {
        const contents = await Promise.all(unstaged.map(readFile))
        $defer(() =>
          Promise.all(unstaged.map((name, i) => writeFile(name, contents[i])))
        )
        await git(['checkout'].concat(unstaged))
        await formatFiles(unstaged)
      }
    }

    await testFiles(files)

    await git(['add'].concat(files))
  })
)
